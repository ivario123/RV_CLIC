$comment Generated by Amaranth $end
$date 2023-05-08 10:48:22.704197 $end
$timescale 1 ps $end
$scope module bench $end
$scope module top $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 5 # mem_r_addr $end
$var wire 5 $ write_address $end
$var wire 32 % read_data $end
$var wire 32 & mem_r_data $end
$var wire 5 ' mem_w_addr $end
$var wire 32 ( mem_w_data $end
$var wire 1 ) write_enable $end
$var wire 32 * write_data $end
$scope module read_port $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 5 # mem_r_addr $end
$var wire 32 & mem_r_data $end
$var wire 5 + latch_addr $end
$var wire 32 , memory(0) $end
$var wire 32 - memory(1) $end
$var wire 32 . memory(2) $end
$var wire 32 / memory(3) $end
$var wire 32 0 memory(4) $end
$var wire 32 1 memory(5) $end
$var wire 32 2 memory(6) $end
$var wire 32 3 memory(7) $end
$var wire 32 4 memory(8) $end
$var wire 32 5 memory(9) $end
$var wire 32 6 memory(10) $end
$var wire 32 7 memory(11) $end
$var wire 32 8 memory(12) $end
$var wire 32 9 memory(13) $end
$var wire 32 : memory(14) $end
$var wire 32 ; memory(15) $end
$var wire 32 < memory(16) $end
$var wire 32 = memory(17) $end
$var wire 32 > memory(18) $end
$var wire 32 ? memory(19) $end
$var wire 32 @ memory(20) $end
$var wire 32 A memory(21) $end
$var wire 32 B memory(22) $end
$var wire 32 C memory(23) $end
$var wire 32 D memory(24) $end
$var wire 32 E memory(25) $end
$var wire 32 F memory(26) $end
$var wire 32 G memory(27) $end
$var wire 32 H memory(28) $end
$var wire 32 I memory(29) $end
$var wire 32 J memory(30) $end
$var wire 32 K memory(31) $end
$upscope $end
$scope module write_port $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 5 ' mem_w_addr $end
$var wire 32 ( mem_w_data $end
$var wire 32 , memory(0) $end
$var wire 32 - memory(1) $end
$var wire 32 . memory(2) $end
$var wire 32 / memory(3) $end
$var wire 32 0 memory(4) $end
$var wire 32 1 memory(5) $end
$var wire 32 2 memory(6) $end
$var wire 32 3 memory(7) $end
$var wire 32 4 memory(8) $end
$var wire 32 5 memory(9) $end
$var wire 32 6 memory(10) $end
$var wire 32 7 memory(11) $end
$var wire 32 8 memory(12) $end
$var wire 32 9 memory(13) $end
$var wire 32 : memory(14) $end
$var wire 32 ; memory(15) $end
$var wire 32 < memory(16) $end
$var wire 32 = memory(17) $end
$var wire 32 > memory(18) $end
$var wire 32 ? memory(19) $end
$var wire 32 @ memory(20) $end
$var wire 32 A memory(21) $end
$var wire 32 B memory(22) $end
$var wire 32 C memory(23) $end
$var wire 32 D memory(24) $end
$var wire 32 E memory(25) $end
$var wire 32 F memory(26) $end
$var wire 32 G memory(27) $end
$var wire 32 H memory(28) $end
$var wire 32 I memory(29) $end
$var wire 32 J memory(30) $end
$var wire 32 K memory(31) $end
$var wire 1 L mem_w_en $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
b0 #
b0 $
b0 %
b0 &
b0 '
b0 (
0)
b0 *
b0 +
b0 ,
b0 -
b0 .
b0 /
b0 0
b0 1
b0 2
b0 3
b0 4
b0 5
b0 6
b0 7
b0 8
b0 9
b0 :
b0 ;
b0 <
b0 =
b0 >
b0 ?
b0 @
b0 A
b0 B
b0 C
b0 D
b0 E
b0 F
b0 G
b0 H
b0 I
b0 J
b0 K
0L
$end
#500000
b1 *
1)
1!
0)
#1000000
0!
#1500000
1!
